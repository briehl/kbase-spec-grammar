{
    "scopeName": "source.spec",
    "patterns": [
        { "include": "#expression" },
        { "include": "#comment" },
        { "include": "#statement" },
        {
            "name": "keyword.control.typedef.kbase",
            "match": "typedef"
        },
        {
            "include": "#returns"
        }
    ],
    "repository": {
        "statement": {
            "patterns": [
                {
                    "include": "#function-declaration"
                }
            ]
        },
        "function-declaration": {
            "name": "meta.function.kbase",
            "begin": "\\s*(funcdef)\\s+([^\\s\\(]+)\\s*",
            "end": ";",
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.funcdef.kbase"
                },
                "1": {
                    "name": "storage.type.function.kbase"
                }
            },
            "includes": [
                "#parameters",
                "#returns"
            ]
        },
        "parameters": {
            "name": "meta.function.parameters.kbase",
            "begin": "(\\()",
            "end": "(\\))",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.parameters.begin.kbase"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.parameters.end.kbase"
                }
            }
        },
        "returns": {
            "name": "keyword.control.flow.kbase",
            "match": "returns"
        },
        "comment": {
            "patterns": [{
                "include": "#comment-block"
            }]
        },
        "comment-block": {
            "begin": "\\/\\*",
            "end": "\\*\\/",
            "name": "comment.block",
            "beginCaptures": {
                "0": { "name": "comment.block.open" }
            },
            "endCaptures": {
                "0": { "name": "comment.block.close" }
            }
        },
        "expression": {
            "patterns": [{
                "include": "#letter"
            }, {
                "include": "#paren-expression"
            }]
        },
        "letter": {
            "match": "a|b|c",
            "name": "keyword.letter"
        },
        "paren-expression": {
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": { "name": "punctuation.paren.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.paren.close" }
            },
            "name": "expression.group",
            "patterns": [{ "include": "#expression" }]
        }
    }
}
